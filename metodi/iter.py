import math

def norm(v):
    return math.sqrt(sum(x ** 2 for x in v))

def normalize(v):
    n = norm(v)
    return [x / n for x in v]

def gram_schmidt(A):
    n = len(A)
    m = len(A[0])
    Q = [[0] * m for _ in range(n)]
    R = [[0] * m for _ in range(m)]
    
    for j in range(m):
        v = [A[i][j] for i in range(n)]
        
        for i in range(j):
            R[i][j] = sum(A[x][j] * Q[x][i] for x in range(n))
            v = [v[x] - R[i][j] * Q[x][i] for x in range(n)]
        
        R[j][j] = norm(v)
        qj = normalize(v)  # Нормализуем текущий вектор
        
        for i in range(n):
            Q[i][j] = qj[i]  # Заполняем столбец Q
    
    return Q, R

# Пример использования
A = [
        [18.736, -0.080167, -0.25998, 0.16584],
        [-29.757, 0.057914, 0.18781, -0.26340],
        [31.857, -0.12683, -0.41130, 0.28199],
        [-45.869, 0.089269, 0.28950, -0.40601]
    ]
Q, R = gram_schmidt(A)

# print("Матрица Q:")
# for row in Q:
#     print(row)

# print("\nМатрица R:")
# for row in R:
#     print(row)

ABA = [
    [-0.28389995880002095, -0.48273478001946296, 0.5426590381220421, -0.6260083216817768],
    [0.4508972605685431, -0.3039272455147888, 0.619124880167312, 0.5665748455648317],
    [-0.4827178153016795, -0.6745920048803651, -0.36579893707333827, 0.42201783164828116],
    [0.6950366785972545, -0.46853066980171454, -0.43404687389530583, -0.330162801249982]
]

ABA2 = [
    [-65.99507826345841, 0.1721410017220982, 0.5582462816836935, -0.5841617462153417],
    [0, 0.06483099622952418, 0.21024087482902531, -2.361659852401221e-06],
    [0, 0, -6.120174570418924e-06, -7.1895489881235175e-06],
    [0, 0, 0, 1.1729312043882646e-06]
]

ABA3 = [
    [18.012086959267904],
[-0.035409348373213564],
[-7.425937580119539e-05],
[6.484811100554853e-07]
]

print("Матрица Q:")
for row in ABA:
    print(row)

print("\nМатрица R:")
for row in ABA2:
    print(row)

print("\nСобственные значения матрицы A:")
for row in ABA3:
    print(row)

